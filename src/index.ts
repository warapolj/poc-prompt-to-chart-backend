import { serve } from '@hono/node-server'
import { Hono } from 'hono'
import { ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings } from '@langchain/google-genai'
import { z } from 'zod'
import { CSVLoader } from '@langchain/community/document_loaders/fs/csv'
import { RecursiveCharacterTextSplitter } from 'langchain/text_splitter'
import { MemoryVectorStore } from 'langchain/vectorstores/memory'
import { RetrievalQAChain } from 'langchain/chains'
import { streamSSE } from 'hono/streaming'
import { cors } from 'hono/cors'
import mysql from 'mysql2/promise'
import 'dotenv/config'

// Database configuration
const dbConfig = {
  host: 'localhost',
  port: 3306,
  user: 'poc_user',
  password: 'poc_password',
  database: 'poc_chart_db',
}

// Function to get available columns from database
async function getAvailableColumns() {
  let connection
  try {
    connection = await mysql.createConnection(dbConfig)

    const [rows] = await connection.execute(
      `
      SELECT 
        COLUMN_NAME as column_name,
        DATA_TYPE as data_type,
        COLUMN_COMMENT as column_comment
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'olympic_medalists'
      AND COLUMN_NAME NOT IN ('id', 'created_at')
      ORDER BY ORDINAL_POSITION
    `,
      [dbConfig.database],
    )

    return (rows as any[]).map((row) => ({
      name: row.column_name,
      type: row.data_type,
      comment: row.column_comment || '',
    }))
  } catch (error) {
    console.error('Error fetching columns:', error)
    // Fallback to hardcoded columns if database is not available
    return [
      { name: 'season', type: 'varchar', comment: '‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• (Summer/Winter)' },
      { name: 'year', type: 'int', comment: '‡∏õ‡∏µ' },
      { name: 'medal', type: 'varchar', comment: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (Gold/Silver/Bronze)' },
      { name: 'country_code', type: 'varchar', comment: '‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (THA, USA, etc.)' },
      { name: 'country', type: 'varchar', comment: '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®' },
      { name: 'athletes', type: 'varchar', comment: '‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤' },
      { name: 'games', type: 'varchar', comment: '‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (2024 Paris, 2020 Tokyo, etc.)' },
      { name: 'sport', type: 'varchar', comment: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏µ‡∏¨‡∏≤ (Swimming, Athletics, etc.)' },
      { name: 'event_gender', type: 'varchar', comment: '‡πÄ‡∏û‡∏® (Men, Women, Mixed)' },
      { name: 'event_name', type: 'varchar', comment: '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô' },
    ]
  } finally {
    if (connection) {
      await connection.end()
    }
  }
}

const app = new Hono()

// ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS middleware
app.use(
  '/*',
  cors({
    origin: '*',
    allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowHeaders: ['Content-Type', 'Authorization', 'Accept'],
  }),
)

app.get('/', (c: any) => {
  return c.html(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>SSE Test</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .container { max-width: 800px; margin: 0 auto; }
            textarea { width: 100%; height: 100px; margin: 10px 0; }
            button { padding: 10px 20px; background: #007bff; color: white; border: none; cursor: pointer; }
            button:disabled { background: #ccc; cursor: not-allowed; }
            .output { border: 1px solid #ccc; padding: 10px; margin: 10px 0; height: 300px; overflow-y: scroll; }
            .message { margin: 5px 0; padding: 5px; }
            .status { background: #e7f3ff; }
            .result { background: #e7ffe7; }
            .error { background: #ffe7e7; }
            .progress { width: 100%; height: 20px; margin: 10px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Server-Sent Events Test</h1>
            <textarea id="query" placeholder="‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà... ‡πÄ‡∏ä‡πà‡∏ô:
- ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
- ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏õ‡∏µ 2024
- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏≠‡∏á‡∏Ç‡∏≠‡∏á USA ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î">‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢</textarea><br>
            <button id="sendBtn" onclick="sendQuery()">‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (AI Analysis)</button>
            <button id="testBtn" onclick="testStream()">‡∏ó‡∏î‡∏™‡∏≠‡∏ö SSE</button>
            <button id="columnsBtn" onclick="loadColumns()">‡∏î‡∏π Columns</button>
            <button id="testDbBtn" onclick="testDatabase()">‡∏ó‡∏î‡∏™‡∏≠‡∏ö DB</button>
            <button id="clearBtn" onclick="clearOutput()">‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</button>
            
            <progress id="progress" class="progress" value="0" max="100"></progress>
            <div id="output" class="output"></div>
        </div>

        <script>
            let eventSource = null;
            
            function sendQuery() {
                const query = document.getElementById('query').value;
                const output = document.getElementById('output');
                const sendBtn = document.getElementById('sendBtn');
                const progress = document.getElementById('progress');
                
                if (!query.trim()) {
                    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°');
                    return;
                }
                
                sendBtn.disabled = true;
                progress.value = 0;
                
                // ‡∏õ‡∏¥‡∏î connection ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if (eventSource) {
                    eventSource.close();
                }
                
                // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà API
                fetch('/api/query-stream', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query: query })
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    
                    function readStream() {
                        return reader.read().then(({ done, value }) => {
                            if (done) {
                                sendBtn.disabled = false;
                                return;
                            }
                            
                            const chunk = decoder.decode(value);
                            const lines = chunk.split('\\n');
                            
                            lines.forEach(line => {
                                if (line.startsWith('data: ')) {
                                    try {
                                        const data = JSON.parse(line.substring(6));
                                        handleSSEMessage(data);
                                    } catch (e) {
                                        console.error('Error parsing SSE data:', e);
                                    }
                                }
                            });
                            
                            return readStream();
                        });
                    }
                    
                    return readStream();
                })
                .catch(error => {
                    console.error('Error:', error);
                    addMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
                    sendBtn.disabled = false;
                });
            }
            
            function handleSSEMessage(data) {
                const output = document.getElementById('output');
                const progress = document.getElementById('progress');
                
                if (data.progress) {
                    progress.value = data.progress;
                }
                
                switch (data.type) {
                    case 'status':
                        addMessage(data.message, 'status');
                        break;
                    case 'result':
                        addMessage('‚úÖ ' + data.message, 'result');
                        if (data.column_analysis) {
                            addMessage('üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ' + data.column_analysis.analysis, 'result');
                            addMessage('üîç Columns ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ' + data.column_analysis.required_columns.join(', '), 'result');
                            addMessage('üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü: ' + data.column_analysis.chart_type, 'result');
                        }
                        if (data.result.metadata && data.result.metadata.database_info) {
                            addMessage('üóÑÔ∏è Database: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏°‡∏µ ' + data.result.metadata.database_info.total_columns + ' columns', 'result');
                        }
                        addMessage('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ' + JSON.stringify(data.result, null, 2), 'result');
                        break;
                    case 'error':
                        addMessage('‚ùå ' + data.message + ': ' + data.error, 'error');
                        break;
                    case 'done':
                        addMessage('üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', 'result');
                        document.getElementById('sendBtn').disabled = false;
                        break;
                }
                
                output.scrollTop = output.scrollHeight;
            }
            
            function addMessage(message, type) {
                const output = document.getElementById('output');
                const div = document.createElement('div');
                div.className = 'message ' + type;
                div.textContent = new Date().toLocaleTimeString() + ': ' + message;
                output.appendChild(div);
            }
            
            function clearOutput() {
                document.getElementById('output').innerHTML = '';
                document.getElementById('progress').value = 0;
            }
            
            function testStream() {
                const output = document.getElementById('output');
                const testBtn = document.getElementById('testBtn');
                const progress = document.getElementById('progress');
                
                testBtn.disabled = true;
                progress.value = 0;
                
                fetch('/api/test-stream')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    
                    function readStream() {
                        return reader.read().then(({ done, value }) => {
                            if (done) {
                                testBtn.disabled = false;
                                return;
                            }
                            
                            const chunk = decoder.decode(value);
                            const lines = chunk.split('\\n');
                            
                            lines.forEach(line => {
                                if (line.startsWith('data: ')) {
                                    try {
                                        const data = JSON.parse(line.substring(6));
                                        handleSSEMessage(data);
                                    } catch (e) {
                                        console.error('Error parsing SSE data:', e);
                                    }
                                }
                            });
                            
                            return readStream();
                        });
                    }
                    
                    return readStream();
                })
                .catch(error => {
                    console.error('Error:', error);
                    addMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
                    testBtn.disabled = false;
                });
            }
            
            function loadColumns() {
                const columnsBtn = document.getElementById('columnsBtn');
                columnsBtn.disabled = true;
                
                fetch('/api/columns')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        addMessage('üìã Columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', 'result');
                        data.columns.forEach((col, index) => {
                            addMessage((index + 1) + '. ' + col.name + ' (' + col.type + '): ' + (col.comment || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'), 'result');
                        });
                        addMessage('‡∏£‡∏ß‡∏° ' + data.total + ' columns', 'result');
                    } else {
                        addMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î columns ‡πÑ‡∏î‡πâ: ' + data.error, 'error');
                    }
                    columnsBtn.disabled = false;
                })
                .catch(error => {
                    console.error('Error:', error);
                    addMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
                    columnsBtn.disabled = false;
                });
            }
            
            function testDatabase() {
                const testDbBtn = document.getElementById('testDbBtn');
                testDbBtn.disabled = true;
                
                fetch('/api/test-db')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        addMessage('‚úÖ ' + data.message, 'result');
                        addMessage('üîß Database: ' + data.config.host + ':' + data.config.port + '/' + data.config.database, 'result');
                    } else {
                        addMessage('‚ùå ' + data.message + ': ' + data.error, 'error');
                    }
                    testDbBtn.disabled = false;
                })
                .catch(error => {
                    console.error('Error:', error);
                    addMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
                    testDbBtn.disabled = false;
                });
            }
        </script>
    </body>
    </html>
  `)
})

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
app.get('/api/test-db', async (c: any) => {
  try {
    const connection = await mysql.createConnection(dbConfig)
    await connection.execute('SELECT 1 as test')
    await connection.end()

    return c.json({
      success: true,
      message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      config: {
        host: dbConfig.host,
        port: dbConfig.port,
        database: dbConfig.database,
        user: dbConfig.user,
      },
    })
  } catch (error) {
    return c.json(
      {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      500,
    )
  }
})

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
app.get('/api/columns', async (c: any) => {
  try {
    const columns = await getAvailableColumns()
    return c.json({
      success: true,
      columns: columns,
      total: columns.length,
    })
  } catch (error) {
    return c.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      500,
    )
  }
})

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Server-Sent Events
app.post('/api/query-stream', async (c: any) => {
  const body = await c.req.json()
  const userQuery = z.string().parse(body.query)

  return streamSSE(c, async (stream: any) => {
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: `‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${userQuery}`,
          progress: 20,
        }),
        event: 'update',
      })

      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...',
          progress: 50,
        }),
        event: 'update',
      })

      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• columns ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
          progress: 55,
        }),
        event: 'update',
      })

      // ‡πÇ‡∏´‡∏•‡∏î columns ‡πÅ‡∏ö‡∏ö dynamic ‡∏à‡∏≤‡∏Å database
      const availableColumns = await getAvailableColumns()

      const databaseStatus =
        availableColumns.length > 0 && availableColumns[0].comment !== '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'
          ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          : '‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB)'

      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: `${databaseStatus} - ‡∏û‡∏ö ${availableColumns.length} columns`,
          progress: 60,
        }),
        event: 'update',
      })

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á columns description ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
      const columnsDescription = availableColumns
        .map((col) => `- ${col.name} (${col.type}): ${col.comment || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'}`)
        .join('\n      ')

      const columnAnalysisPrompt = `
      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ column ‡πÑ‡∏´‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Olympic:
      
      ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: "${userQuery}"
      
      Columns ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
      ${columnsDescription}
      
      ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON object ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
      {
        "required_columns": ["column1", "column2"],
        "chart_type": "bar|line|pie|scatter",
        "analysis": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å columns ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ"
      }
      `

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á AI model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
      const analysisModel = new ChatGoogleGenerativeAI({
        model: 'gemini-1.5-flash',
        apiKey: process.env.GEMINI_API_KEY,
        temperature: 0.1,
      })

      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI...',
          progress: 65,
        }),
        event: 'update',
      })

      const analysisResult = await analysisModel.invoke(columnAnalysisPrompt)
      let columnAnalysis

      try {
        // ‡πÅ‡∏õ‡∏•‡∏á content ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ JSON
        const contentString =
          typeof analysisResult.content === 'string'
            ? analysisResult.content
            : JSON.stringify(analysisResult.content)

        const jsonMatch = contentString.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          columnAnalysis = JSON.parse(jsonMatch[0])
        } else {
          throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö JSON ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö')
        }
      } catch (parseError) {
        console.error('Error parsing AI response:', parseError)
        // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡πÑ‡∏î‡πâ
        columnAnalysis = {
          required_columns: ['country', 'medal'],
          chart_type: 'bar',
          analysis: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
        }
      }

      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡πÉ‡∏ä‡πâ columns ${columnAnalysis.required_columns.join(', ')}`,
          progress: 75,
        }),
        event: 'update',
      })

      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
      await new Promise((resolve) => setTimeout(resolve, 1000))

      await stream.writeSSE({
        data: JSON.stringify({
          type: 'status',
          message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...',
          progress: 80,
        }),
        event: 'update',
      })

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏° columns ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
      const mockResult = {
        chart_type: columnAnalysis.chart_type,
        title: `‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${userQuery}`,
        data: [
          { label: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1', value: 100 },
          { label: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2', value: 200 },
          { label: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3', value: 150 },
        ],
        metadata: {
          columns_used: columnAnalysis.required_columns,
          aggregation_method: 'count',
          filters_applied: [],
          total_records: 3,
          data_range: 'mock data based on analysis',
          analysis: columnAnalysis.analysis,
          available_columns: availableColumns.map((col) => ({
            name: col.name,
            type: col.type,
            comment: col.comment,
          })),
          database_info: {
            connected: true,
            total_columns: availableColumns.length,
          },
        },
      }

      // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      await stream.writeSSE({
        data: JSON.stringify({
          type: 'result',
          message: '‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
          progress: 100,
          result: mockResult,
          column_analysis: columnAnalysis,
        }),
        event: 'complete',
      })

      // ‡∏õ‡∏¥‡∏î connection
      await stream.writeSSE({
        data: JSON.stringify({
          type: 'done',
          message: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
        }),
        event: 'done',
      })
    } catch (error) {
      console.error('Error in streaming:', error)
      await stream.writeSSE({
        data: JSON.stringify({
          type: 'error',
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•',
          error: error instanceof Error ? error.message : 'Unknown error',
        }),
        event: 'error',
      })
    }
  })
})

// Simple SSE test endpoint
app.get('/api/test-stream', (c: any) => {
  return streamSSE(c, async (stream: any) => {
    for (let i = 1; i <= 10; i++) {
      await stream.writeSSE({
        data: JSON.stringify({
          type: 'test',
          message: `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${i}/10`,
          progress: i * 10,
        }),
        event: 'update',
      })

      // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await new Promise((resolve) => setTimeout(resolve, 1000))
    }

    await stream.writeSSE({
      data: JSON.stringify({
        type: 'done',
        message: '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
      }),
      event: 'done',
    })
  })
})

app.post('/api/query', async (c: any) => {
  const body = await c.req.json()
  const userQuery = z.string().parse(body.query)

  const model = new ChatGoogleGenerativeAI({
    model: 'gemini-2.5-pro',
    apiKey: process.env.GEMINI_API_KEY,
    temperature: 0.3,
  })

  const loader = new CSVLoader('all-olympic-medalists-1896-2024.csv')
  const docs = await loader.load()

  const splitter = new RecursiveCharacterTextSplitter({
    chunkSize: 5000,
    chunkOverlap: 200,
  })
  const splitDocs = await splitter.splitDocuments(docs)

  const vectorStore = await MemoryVectorStore.fromDocuments(
    splitDocs,
    new GoogleGenerativeAIEmbeddings({
      modelName: 'models/embedding-001',
      apiKey: process.env.GEMINI_API_KEY,
    }),
  )
  const retriever = vectorStore.asRetriever({
    k: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô chunks ‡∏ó‡∏µ‡πà‡∏à‡∏∞ retrieve
  })

  const chain = RetrievalQAChain.fromLLM(model, retriever)
  const result = await chain.call({
    query: `
    You are a data analyst assistant. Analyze the user's query and provide structured JSON data for creating graphs/charts.

    DATASET INFORMATION:
    - Total records: ~20,249 Olympic medal records from 1896-2024
    - Available columns: season, year, medal, country_code, country, athletes, games, sport, event_gender, event_name
    - Medal types: Gold, Silver, Bronze
    - Time range: 1896-2024 Olympics
    - Countries: Multiple countries with country codes

    USER QUERY: "${userQuery}"

    IMPORTANT: You have access to a LARGE dataset with thousands of records. Don't limit yourself to just a few samples.
    Analyze ALL relevant data to provide comprehensive results.

    INSTRUCTIONS:
    1. Analyze what type of visualization the user wants (bar chart, line chart, pie chart, etc.)
    2. Identify which columns are needed from the dataset
    3. Determine appropriate aggregations (count, sum, group by, etc.)
    4. Structure the output as JSON that's ready for chart libraries
    5. Include as much relevant data as possible, not just 2-3 samples

    EXPECTED JSON FORMAT:
    {
      "chart_type": "bar|line|pie|scatter|histogram",
      "title": "Chart title in Thai",
      "data": [
        {
          "label": "category name",
          "value": number,
          "additional_info": {}
        }
      ],
      "metadata": {
        "columns_used": ["column1", "column2"],
        "aggregation_method": "count|sum|average",
        "filters_applied": [],
        "total_records": number,
        "data_range": "description of data coverage"
      }
    }

    REQUIREMENTS:
    - Provide actual data analysis from the full dataset, not just sample data
    - Include Thai language labels where appropriate
    - Make sure JSON is valid and ready for chart libraries
    - Include metadata for transparency
    - Suggest the most appropriate chart type for the query
    - Include comprehensive data, not just 2-3 entries

    Please analyze the FULL dataset and provide the structured JSON response.
    `,
  })

  return c.json({
    result,
  })
})

serve(
  {
    fetch: app.fetch,
    port: 3000,
  },
  (info) => {
    console.log(`Server is running on http://localhost:${info.port}`)
  },
)
